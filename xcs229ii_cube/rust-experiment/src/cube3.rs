// This file was auto-generated, do not change manually

fn cube3_to_cube2(x: i256) -> i128 {
    return (((x & 0x38000000000000000000000000000000000000000) >> 90)|((x & 0xe00000000000000000000000000000000000000) >> 87)|((x & 0xe00000000000000000000000000000000000) >> 78)|((x & 0x3f000000000000000000000000000000000) >> 75)|((x & 0x1c0000000000000000000000000000000) >> 72)|((x & 0x1c0000000000000000000000000000) >> 63)|((x & 0x7e00000000000000000000000000) >> 60)|((x & 0x38000000000000000000000000) >> 57)|((x & 0x38000000000000000000000) >> 48)|((x & 0xfc0000000000000000000) >> 45)|((x & 0x7000000000000000000) >> 42)|((x & 0x7000000000000000) >> 33)|((x & 0x1f8000000000000) >> 30)|((x & 0xe00000000000) >> 27)|((x & 0xe00000000) >> 18)|((x & 0x3f000000) >> 15)|((x & 0x1c0000) >> 12)|((x & 0x1c0) >> 3)|((x & 0x7) << 0)) as i128;
}


pub fn orient_cube(x: i256) -> i256 {
    let mut actual_color_pattern: i256;
    actual_color_pattern = ((x & 0x38000000000000000000000000000000000) >> 129)|((x & 0x1c0000000000000) >> 51)|((x & 0x1c0) >> 6);
    if actual_color_pattern == 102 {
        return ((x & 0x3ffffffffffffffffffffffffffffffffffffffff) << 0);
    }
    if actual_color_pattern == 305 {
        return ((x & 0x1c0038) << 141)|((x & 0xe00) << 147)|((x & 0x7) << 153)|((x & 0xe001c0) << 129)|((x & 0x7000) << 135)|((x & 0x7000000) << 117)|((x & 0x38000) << 123)|((x & 0xe00e00e00000000000000000000) << 27)|((x & 0x7007000000000000000000000) << 33)|((x & 0x38000000000000000000000) << 39)|((x & 0x1c01c0000000000000000000000) << 21)|((x & 0x38000000000000000000000000) << 15)|((x & 0x38038038000000) << 54)|((x & 0x1c01c0000000) << 60)|((x & 0xe00000000) << 66)|((x & 0x7007000000000) << 48)|((x & 0xe00000000000) << 42)|((x & 0x3803803fffffff000000000000000000000000000) >> 81)|((x & 0x1c01c0000000000000000000000000000000000) >> 75)|((x & 0xe00000000000000000000000000000000000) >> 69)|((x & 0x7007000000000000000000000000000000000000) >> 87)|((x & 0xe00000000000000000000000000000000000000) >> 93)|((x & 0x70381c0000000000000) >> 48)|((x & 0x381c0e00000000000000) >> 54)|((x & 0x1c0e07000000000000000) >> 60);
    }
    if actual_color_pattern == 396 {
        return ((x & 0x1c01c01fffffff8000000) << 81)|((x & 0xe00e00000000000000) << 87)|((x & 0x7000000000000000) << 93)|((x & 0x38038000000000000000) << 75)|((x & 0x7000000000000000000) << 69)|((x & 0x7007007000000000000000000000000000) >> 27)|((x & 0x38038000000000000000000000000000) >> 21)|((x & 0x1c0000000000000000000000000000) >> 15)|((x & 0xe00e00000000000000000000000000000) >> 33)|((x & 0x1c0000000000000000000000000000000) >> 39)|((x & 0x1c0e07) << 60)|((x & 0xe07038) << 54)|((x & 0x70381c0) << 48)|((x & 0xe00e00e00000000000000000000) >> 54)|((x & 0x7007000000000000000000000) >> 48)|((x & 0x38000000000000000000000) >> 42)|((x & 0x1c01c0000000000000000000000) >> 60)|((x & 0x38000000000000000000000000) >> 66)|((x & 0xe00000000000000000000000000000000000) >> 117)|((x & 0x1c0038000000000000000000000000000000000) >> 129)|((x & 0x38007000000000000000000000000000000000000) >> 141)|((x & 0x1c0000000000000000000000000000000000) >> 123)|((x & 0x38000000000000000000000000000000000000) >> 135)|((x & 0x7000000000000000000000000000000000000000) >> 147)|((x & 0xe00000000000000000000000000000000000000) >> 153);
    }
    actual_color_pattern = ((x & 0xe00000000000000000000000000000000000000) >> 147)|((x & 0x7000000000000000000000000000) >> 105)|((x & 0x7000000) >> 24);
    if actual_color_pattern == 270 {
        return ((x & 0x7ffffff007fc01ffffffc0000000000000) << 27)|((x & 0x3fe00000000000000000000) << 45)|((x & 0xff8000000000000000000000000) << 9)|((x & 0xff8000000000000000000000000000000000) >> 63)|((x & 0x1ff000000000000000000000000000000000000) >> 81)|((x & 0x3fe00000000000000000000000000000000000000) >> 99)|((x & 0xe00000007) << 18)|((x & 0x1c00381c0038) << 6)|((x & 0x38007000e001c0) >> 6)|((x & 0x1c0000e00) << 12)|((x & 0x38000007000) << 0)|((x & 0x7000000038000) >> 12)|((x & 0xe00007000000) >> 18);
    }
    if actual_color_pattern == 116 {
        return ((x & 0xe00000000000038000000000000000000000) << 18)|((x & 0x1c0038000000007000e00000000000000000000) << 6)|((x & 0x38007000000000e001c0000000000000000000000) >> 6)|((x & 0x1c0000000000007000000000000000000000) << 12)|((x & 0x38000000000000e00000000000000000000000) << 0)|((x & 0x70000000000001c0000000000000000000000000) >> 12)|((x & 0xe00000000000038000000000000000000000000) >> 18)|((x & 0xe00000000) << 99)|((x & 0x1c0038000000) << 87)|((x & 0x38007000000000) << 75)|((x & 0x1c0000000) << 93)|((x & 0x38000000000) << 81)|((x & 0x7000000000000) << 69)|((x & 0xe00000000000) << 63)|((x & 0x7) << 78)|((x & 0xe38) << 66)|((x & 0x1c71c0) << 54)|((x & 0xe38000) << 42)|((x & 0x7000000) << 30)|((x & 0x1c01c01c0000000000000) >> 27)|((x & 0xe00e00000000000000) >> 21)|((x & 0x7000000000000000) >> 15)|((x & 0x38038000000000000000) >> 33)|((x & 0x7000000000000000000) >> 39)|((x & 0x1c0000000000000000000000000000) >> 90)|((x & 0x38007000000000000000000000000000) >> 102)|((x & 0x7000e00000000000000000000000000000) >> 114)|((x & 0x38000000000000000000000000000) >> 96)|((x & 0x7000000000000000000000000000000) >> 108)|((x & 0xe00000000000000000000000000000000) >> 120)|((x & 0x1c0000000000000000000000000000000) >> 126);
    }
    if actual_color_pattern == 417 {
        return ((x & 0x7) << 159)|((x & 0x38) << 153)|((x & 0x1c0) << 147)|((x & 0xe00) << 141)|((x & 0x7000) << 135)|((x & 0x38000) << 129)|((x & 0x1c0000) << 123)|((x & 0xe00000) << 117)|((x & 0x7000000) << 111)|((x & 0x1c01c01c01ff000000000) << 54)|((x & 0xe00e00000000000000) << 60)|((x & 0x7000000000000000) << 66)|((x & 0x38038000000000000000) << 48)|((x & 0x7000000000000000000) << 42)|((x & 0xff8000000) << 72)|((x & 0x3fe00000000000) << 36)|((x & 0x7007007007fc0000000000000000000000) >> 54)|((x & 0x38038000000000000000000000000000) >> 48)|((x & 0x1c0000000000000000000000000000) >> 42)|((x & 0xe00e00000000000000000000000000000) >> 60)|((x & 0x1c0000000000000000000000000000000) >> 66)|((x & 0x3fe00000000000000000000) >> 36)|((x & 0xff8000000000000000000000000) >> 72)|((x & 0x38000000000000000000000000000000000) >> 111)|((x & 0x1c0000000000000000000000000000000000) >> 117)|((x & 0xe00000000000000000000000000000000000) >> 123)|((x & 0x7000000000000000000000000000000000000) >> 129)|((x & 0x38000000000000000000000000000000000000) >> 135)|((x & 0x1c0000000000000000000000000000000000000) >> 141)|((x & 0xe00000000000000000000000000000000000000) >> 147)|((x & 0x7000000000000000000000000000000000000000) >> 153)|((x & 0x38000000000000000000000000000000000000000) >> 159);
    }
    actual_color_pattern = ((x & 0xe00000000000000000000) >> 75)|((x & 0x7000000000000000000) >> 69)|((x & 0x7) << 0);
    if actual_color_pattern == 270 {
        return ((x & 0x7fc0000000000000) << 99)|((x & 0xff8000000000000000) << 81)|((x & 0x1ff000000000000000000) << 63)|((x & 0x3ffffff803fe00ffffffe00000000000000000000) >> 27)|((x & 0x1ff000000000000000000000000000) >> 9)|((x & 0x7fc0000000000000000000000000000000) >> 45)|((x & 0xe001c0038007) << 6)|((x & 0x7000000038) << 12)|((x & 0x380001c0) << 18)|((x & 0x7000e07000e00) >> 6)|((x & 0x38000007000) << 0)|((x & 0x380000001c0000) >> 18)|((x & 0x1c0000e00000) >> 12);
    }
    if actual_color_pattern == 417 {
        return ((x & 0x7ffffff) << 135)|((x & 0x1c0000000000007000000000000000) << 18)|((x & 0x38007000000000e001c0000000000000) << 6)|((x & 0x7000e000000001c0038000000000000000) >> 6)|((x & 0x38000000000000e00000000000000) << 12)|((x & 0x70000000000001c0000000000000000) << 0)|((x & 0xe00000000000038000000000000000000) >> 12)|((x & 0x1c0000000000007000000000000000000) >> 18)|((x & 0xe07038000000) << 60)|((x & 0x70381c0000000) << 54)|((x & 0x381c0e00000000) << 48)|((x & 0x3ffffff8000000000000000000000000000000000) >> 108)|((x & 0x381c0e00000000000000000000) >> 75)|((x & 0x1c0e07000000000000000000000) >> 81)|((x & 0xe07038000000000000000000000) >> 87);
    }
    if actual_color_pattern == 116 {
        return ((x & 0xe00e00e00000000000007007007) << 54)|((x & 0x7007000000000000000038038) << 60)|((x & 0x380000000000000000001c0) << 66)|((x & 0x1c01c0000000000000000e00e00) << 48)|((x & 0x380000000000000000001c0000) << 42)|((x & 0xe001c0000000) << 87)|((x & 0x7000000000) << 93)|((x & 0x38000000) << 99)|((x & 0x7000e00000000) << 75)|((x & 0x38000000000) << 81)|((x & 0x38000000000000) << 63)|((x & 0x1c0000000000) << 69)|((x & 0x380380380000000000001c01c01c0000000000000) >> 54)|((x & 0x1c01c0000000000000000e00e00000000000000) >> 48)|((x & 0xe00000000000000000007000000000000000) >> 42)|((x & 0x7007000000000000000038038000000000000000) >> 60)|((x & 0xe00000000000000000007000000000000000000) >> 66)|((x & 0x1c0000000000000000000000000000) >> 63)|((x & 0x38007000000000000000000000000000) >> 75)|((x & 0x7000e00000000000000000000000000000) >> 87)|((x & 0x38000000000000000000000000000) >> 69)|((x & 0x7000000000000000000000000000000) >> 81)|((x & 0xe00000000000000000000000000000000) >> 93)|((x & 0x1c0000000000000000000000000000000) >> 99);
    }
    actual_color_pattern = ((x & 0xe00000000000000000000000000000000000) >> 135)|((x & 0x7000000000000000) >> 57)|((x & 0x38000000) >> 27);
    if actual_color_pattern == 417 {
        return ((x & 0x3ffffff8000000) << 108)|((x & 0x1c0038000000007000e00000000000000) << 6)|((x & 0xe00000000000038000000000000000) << 12)|((x & 0x70000000000001c0000000000000) << 18)|((x & 0xe001c0000000038007000000000000000) >> 6)|((x & 0x70000000000001c0000000000000000) << 0)|((x & 0x70000000000001c0000000000000000000) >> 18)|((x & 0x38000000000000e00000000000000000) >> 12)|((x & 0x1c0e07) << 87)|((x & 0xe07038) << 81)|((x & 0x70381c0) << 75)|((x & 0x381c0e00000000000000000000) >> 48)|((x & 0x1c0e07000000000000000000000) >> 54)|((x & 0xe07038000000000000000000000) >> 60)|((x & 0x3ffffff8000000000000000000000000000000000) >> 135);
    }
    if actual_color_pattern == 116 {
        return ((x & 0xe001c0000000038007000000000000000000000) << 6)|((x & 0x70000000000001c0000000000000000000000) << 12)|((x & 0x38000000000000e00000000000000000000) << 18)|((x & 0x7000e000000001c0038000000000000000000000) >> 6)|((x & 0x38000000000000e00000000000000000000000) << 0)|((x & 0x38000000000000e00000000000000000000000000) >> 18)|((x & 0x1c0000000000007000000000000000000000000) >> 12)|((x & 0x1c0038) << 114)|((x & 0xe00) << 120)|((x & 0x7) << 126)|((x & 0xe001c0) << 102)|((x & 0x7000) << 108)|((x & 0x7000000) << 90)|((x & 0x38000) << 96)|((x & 0x38038038000000) << 27)|((x & 0x1c01c0000000) << 33)|((x & 0xe00000000) << 39)|((x & 0x7007000000000) << 21)|((x & 0xe00000000000) << 15)|((x & 0x1c0038000000000000000000000000000) >> 75)|((x & 0xe00000000000000000000000000000) >> 69)|((x & 0x7000000000000000000000000000) >> 63)|((x & 0xe001c0000000000000000000000000000) >> 87)|((x & 0x7000000000000000000000000000000) >> 81)|((x & 0x7000000000000000000000000000000000) >> 99)|((x & 0x38000000000000000000000000000000) >> 93)|((x & 0x1c0000000000000) >> 30)|((x & 0x38e00000000000000) >> 42)|((x & 0x71c7000000000000000) >> 54)|((x & 0x38e00000000000000000) >> 66)|((x & 0x1c0000000000000000000) >> 78);
    }
    if actual_color_pattern == 270 {
        return ((x & 0x70381c0000000000000) << 87)|((x & 0x381c0e00000000000000) << 81)|((x & 0x1c0e07000000000000000) << 75)|((x & 0x381c0e000000000000001c0038) << 33)|((x & 0x1c0e07000000000000000007000) << 27)|((x & 0xe07038000000000000000e001c0) << 21)|((x & 0x1c0e070000000000000001c0038000000) >> 21)|((x & 0xe07038000000000000000038000000000) >> 27)|((x & 0x70381c0000000000000038007000000000) >> 33)|((x & 0xe07038000000000000000000000000000000000) >> 75)|((x & 0x70381c0000000000000000000000000000000000) >> 81)|((x & 0x381c0e00000000000000000000000000000000000) >> 87)|((x & 0xe00) << 39)|((x & 0x7) << 45)|((x & 0x7000000) << 9)|((x & 0x38000) << 15)|((x & 0xe00000000) >> 9)|((x & 0x1c0000000) >> 15)|((x & 0x7000000000000) >> 39)|((x & 0xe00000000000) >> 45);
    }
    actual_color_pattern = ((x & 0x38000000000000000000000000) >> 93)|((x & 0x1c0000000000000000000000000000000) >> 123)|((x & 0x1c0000) >> 18);
    if actual_color_pattern == 102 {
        return ((x & 0x3fe00007fc0000000000000) << 72)|((x & 0x7fc0000ff8000000000000000) << 54)|((x & 0xff80001ff000000000000000000) << 36)|((x & 0xff80001ff000000000000000000000000000) >> 36)|((x & 0x1ff00003fe00000000000000000000000000000) >> 54)|((x & 0x3fe00007fc0000000000000000000000000000000) >> 72)|((x & 0x38000007) << 24)|((x & 0x1c0000038) << 18)|((x & 0xe000001c0) << 12)|((x & 0x7000000e00) << 6)|((x & 0x38000007000) << 0)|((x & 0x1c0000038000) >> 6)|((x & 0xe000001c0000) >> 12)|((x & 0x7000000e00000) >> 18)|((x & 0x38000007000000) >> 24);
    }
    if actual_color_pattern == 396 {
        return ((x & 0x1c0000000000007000000000000000) << 45)|((x & 0x38007000000000e001c0000000000000) << 33)|((x & 0x7000e000000001c0038000000000000000) << 21)|((x & 0x38000000000000e00000000000000) << 39)|((x & 0x70000000000001c0000000000000000) << 27)|((x & 0xe00000000000038000000000000000000) << 15)|((x & 0x1c0000000000007000000000000000000) << 9)|((x & 0x38000000) << 105)|((x & 0x1c0000000) << 99)|((x & 0xe00000000) << 93)|((x & 0x7000000000) << 87)|((x & 0x38000000000) << 81)|((x & 0x1c0000000000) << 75)|((x & 0xe00000000000) << 69)|((x & 0x7000000000000) << 63)|((x & 0x38000000000000) << 57)|((x & 0x1ff) << 72)|((x & 0x3fe00) << 54)|((x & 0x7fc0000) << 36)|((x & 0xe00000000000000000000000000000000000) >> 90)|((x & 0x1c0038000000000000000000000000000000000) >> 102)|((x & 0x38007000000000000000000000000000000000000) >> 114)|((x & 0x1c0000000000000000000000000000000000) >> 96)|((x & 0x38000000000000000000000000000000000000) >> 108)|((x & 0x7000000000000000000000000000000000000000) >> 120)|((x & 0xe00000000000000000000000000000000000000) >> 126)|((x & 0xe00e00e00000000000000000000) >> 81)|((x & 0x7007000000000000000000000) >> 75)|((x & 0x38000000000000000000000) >> 69)|((x & 0x1c01c0000000000000000000000) >> 87)|((x & 0x38000000000000000000000000) >> 93);
    }
    if actual_color_pattern == 305 {
        return ((x & 0x1c0) << 153)|((x & 0x38007) << 141)|((x & 0x7000e00) << 129)|((x & 0x38) << 147)|((x & 0x7000) << 135)|((x & 0xe00000) << 123)|((x & 0x1c0000) << 117)|((x & 0xe00000000000038000007fc0000000000000) >> 9)|((x & 0x1c0038000000007000e00000000000000000000) >> 21)|((x & 0x38007000000000e001c0000000000000000000000) >> 33)|((x & 0x1c0000000000007000000000000000000000) >> 15)|((x & 0x38000000000000e00000ff8000000000000000) >> 27)|((x & 0x70000000000001c0000000000000000000000000) >> 39)|((x & 0xe000000000000380001ff000000000000000000) >> 45)|((x & 0x38000000) << 78)|((x & 0x71c0000000) << 66)|((x & 0xe38e00000000) << 54)|((x & 0x71c0000000000) << 42)|((x & 0x38000000000000) << 30)|((x & 0x7000000000000000000000000000) >> 84)|((x & 0x38000000000000000000000000000) >> 90)|((x & 0x1c0000000000000000000000000000) >> 96)|((x & 0xe00000000000000000000000000000) >> 102)|((x & 0x7000000000000000000000000000000) >> 108)|((x & 0x38000000000000000000000000000000) >> 114)|((x & 0x1c0000000000000000000000000000000) >> 120)|((x & 0xe00000000000000000000000000000000) >> 126)|((x & 0x7000000000000000000000000000000000) >> 132);
    }
    actual_color_pattern = ((x & 0x38000000000000000000000000000000000000000) >> 153)|((x & 0x1c0000000000000000000000000000) >> 111)|((x & 0xe00000000000) >> 45);
    if actual_color_pattern == 396 {
        return ((x & 0x1c0038000000007000e00000000000000) << 33)|((x & 0xe00000000000038000000000000000) << 39)|((x & 0x70000000000001c0000ff8000000) << 45)|((x & 0xe001c0000000038007000000000000000) << 21)|((x & 0x70000000000001c00001ff000000000) << 27)|((x & 0x70000000000001c000003fe00000000000) << 9)|((x & 0x38000000000000e00000000000000000) << 15)|((x & 0x7) << 132)|((x & 0x38) << 126)|((x & 0x1c0) << 120)|((x & 0xe00) << 114)|((x & 0x7000) << 108)|((x & 0x38000) << 102)|((x & 0x1c0000) << 96)|((x & 0xe00000) << 90)|((x & 0x7000000) << 84)|((x & 0xe00000000000000000000) >> 30)|((x & 0x1c7000000000000000000000) >> 42)|((x & 0x38e38000000000000000000000) >> 54)|((x & 0x1c7000000000000000000000000) >> 66)|((x & 0xe00000000000000000000000000) >> 78)|((x & 0xe001c0000000000000000000000000000000000) >> 129)|((x & 0x7000000000000000000000000000000000000) >> 123)|((x & 0x38000000000000000000000000000000000) >> 117)|((x & 0x7000e00000000000000000000000000000000000) >> 141)|((x & 0x38000000000000000000000000000000000000) >> 135)|((x & 0x38000000000000000000000000000000000000000) >> 153)|((x & 0x1c0000000000000000000000000000000000000) >> 147);
    }
    if actual_color_pattern == 305 {
        return ((x & 0xe00000000) << 126)|((x & 0x1c0038000000) << 114)|((x & 0x38007000000000) << 102)|((x & 0x1c0000000) << 120)|((x & 0x38000000000) << 108)|((x & 0x7000000000000) << 96)|((x & 0xe00000000000) << 90)|((x & 0xe00000000000000000000) << 51)|((x & 0x1c7000000000000000000000) << 39)|((x & 0x38e38000000000000000000000) << 27)|((x & 0x1c7000000000000000000000000) << 15)|((x & 0xe00000000000000000000000000) << 3)|((x & 0x7) << 105)|((x & 0xe38) << 93)|((x & 0x1c71c0) << 81)|((x & 0xe38000) << 69)|((x & 0x7000000) << 57)|((x & 0x38000000000000000000000000000000000) >> 57)|((x & 0x71c0000000000000000000000000000000000) >> 69)|((x & 0xe38e00000000000000000000000000000000000) >> 81)|((x & 0x71c0000000000000000000000000000000000000) >> 93)|((x & 0x38000000000000000000000000000000000000000) >> 105)|((x & 0x70381c0000000000000) >> 21)|((x & 0x381c0e00000000000000) >> 27)|((x & 0x1c0e07000000000000000) >> 33)|((x & 0x7ffffff000000000000000000000000000) >> 108);
    }
    if actual_color_pattern == 102 {
        return ((x & 0x38000000000000e00000000000000000000) << 24)|((x & 0x1c0000000000007000000000000000000000) << 18)|((x & 0xe00000000000038000000000000000000000) << 12)|((x & 0x70000000000001c0000000000000000000000) << 6)|((x & 0x38000000000000e00000000000000000000000) << 0)|((x & 0x1c0000000000007000000000000000000000000) >> 6)|((x & 0xe00000000000038000000000000000000000000) >> 12)|((x & 0x70000000000001c0000000000000000000000000) >> 18)|((x & 0x38000000000000e00000000000000000000000000) >> 24)|((x & 0x70381c0000000000000) << 60)|((x & 0x381c0e00000000000000) << 54)|((x & 0x1c0e07000000000000000) << 48)|((x & 0x1c0e07000000000000000000000000000) >> 48)|((x & 0xe07038000000000000000000000000000) >> 54)|((x & 0x70381c0000000000000000000000000000) >> 60)|((x & 0x7) << 51)|((x & 0x38) << 45)|((x & 0x1c0) << 39)|((x & 0xe00) << 33)|((x & 0x7000) << 27)|((x & 0x38000) << 21)|((x & 0x1c0000) << 15)|((x & 0xe00000) << 9)|((x & 0x7000000) << 3)|((x & 0x38000000) >> 3)|((x & 0x1c0000000) >> 9)|((x & 0xe00000000) >> 15)|((x & 0x7000000000) >> 21)|((x & 0x38000000000) >> 27)|((x & 0x1c0000000000) >> 33)|((x & 0xe00000000000) >> 39)|((x & 0x7000000000000) >> 45)|((x & 0x38000000000000) >> 51);
    }
    actual_color_pattern = ((x & 0x38000000000000000000000) >> 81)|((x & 0x1c0000000000000000000) >> 75)|((x & 0xe00000000) >> 33);
    if actual_color_pattern == 396 {
        return ((x & 0x1c0000000000000) << 105)|((x & 0x38e00000000000000) << 93)|((x & 0x71c7000000000000000) << 81)|((x & 0x38e00000000000000000) << 69)|((x & 0x1c0000000000000000000) << 57)|((x & 0x7ffffff) << 108)|((x & 0x7000000000000000000000000000) >> 3)|((x & 0xe38000000000000000000000000000) >> 15)|((x & 0x1c71c0000000000000000000000000000) >> 27)|((x & 0xe38000000000000000000000000000000) >> 39)|((x & 0x7000000000000000000000000000000000) >> 51)|((x & 0xe07038000000) << 33)|((x & 0x70381c0000000) << 27)|((x & 0x381c0e00000000) << 21)|((x & 0xe001c0000000000000000000000000000000000) >> 102)|((x & 0x7000000000000000000000000000000000000) >> 96)|((x & 0x38000000000000000000000000000000000) >> 90)|((x & 0x7000e00000000000000000000000000000000000) >> 114)|((x & 0x38000000000000000000000000000000000000) >> 108)|((x & 0x38000000000000000000000000000000000000000) >> 126)|((x & 0x1c0000000000000000000000000000000000000) >> 120)|((x & 0xe00000000000000000000) >> 57)|((x & 0x1c7000000000000000000000) >> 69)|((x & 0x38e38000000000000000000000) >> 81)|((x & 0x1c7000000000000000000000000) >> 93)|((x & 0xe00000000000000000000000000) >> 105);
    }
    if actual_color_pattern == 305 {
        return ((x & 0xe001c0000000) << 114)|((x & 0x7000000000) << 120)|((x & 0x38000000) << 126)|((x & 0x7000e00000000) << 102)|((x & 0x38000000000) << 108)|((x & 0x38000000000000) << 90)|((x & 0x1c0000000000) << 96)|((x & 0xe001c0000000038007000000000000000000000) >> 21)|((x & 0x70000000000001c0000000000000000000000) >> 15)|((x & 0x38000000000000e00000000000000000000) >> 9)|((x & 0x7000e000000001c0038000000000000000000000) >> 33)|((x & 0x38000000000000e00000000000000000000000) >> 27)|((x & 0x38000000000000e00000000000000000000000000) >> 45)|((x & 0x1c0000000000007000000000000000000000000) >> 39)|((x & 0x7007007) << 81)|((x & 0x38038) << 87)|((x & 0x1c0) << 93)|((x & 0xe00e00) << 75)|((x & 0x1c0000) << 69)|((x & 0x7000000000000000000000000000) >> 57)|((x & 0x38000000000000000000000000000) >> 63)|((x & 0x1c0000000000000000000000000000) >> 69)|((x & 0xe00000000000000000000000000000) >> 75)|((x & 0x7000000000000000000000000000000) >> 81)|((x & 0x38000000000000000000000000000000) >> 87)|((x & 0x1c0000000000000000000000000000000) >> 93)|((x & 0xe00000000000000000000000000000000) >> 99)|((x & 0x7000000000000000000000000000000000) >> 105)|((x & 0x7fc0000000000000) >> 36)|((x & 0xff8000000000000000) >> 54)|((x & 0x1ff000000000000000000) >> 72);
    }
    if actual_color_pattern == 102 {
        return ((x & 0x381c0e00000000000000000000) << 60)|((x & 0x1c0e07000000000000000000000) << 54)|((x & 0xe07038000000000000000000000) << 48)|((x & 0x70000000000001c0000000000000) << 24)|((x & 0x38000000000000e00000000000000) << 18)|((x & 0x1c0000000000007000000000000000) << 12)|((x & 0xe00000000000038000000000000000) << 6)|((x & 0x70000000000001c0000000000000000) << 0)|((x & 0x38000000000000e00000000000000000) >> 6)|((x & 0x1c0000000000007000000000000000000) >> 12)|((x & 0xe00000000000038000000000000000000) >> 18)|((x & 0x70000000000001c0000000000000000000) >> 24)|((x & 0xe07038000000000000000000000000000000000) >> 48)|((x & 0x70381c0000000000000000000000000000000000) >> 54)|((x & 0x381c0e00000000000000000000000000000000000) >> 60)|((x & 0x7ffffff) << 27)|((x & 0x3ffffff8000000) >> 27);
    }
    actual_color_pattern = ((x & 0xe00000000000000000000000000) >> 99)|((x & 0x7000000000000000000000000000000000) >> 129)|((x & 0x38000000000000) >> 51);
    if actual_color_pattern == 417 {
        return ((x & 0x38000000) << 132)|((x & 0x1c0000000) << 126)|((x & 0xe00000000) << 120)|((x & 0x7000000000) << 114)|((x & 0x38000000000) << 108)|((x & 0x1c0000000000) << 102)|((x & 0xe00000000000) << 96)|((x & 0x7000000000000) << 90)|((x & 0x38000000000000) << 84)|((x & 0x1c0000000000000) << 78)|((x & 0x38e00000000000000) << 66)|((x & 0x71c7000000000000000) << 54)|((x & 0x38e00000000000000000) << 42)|((x & 0x1c0000000000000000000) << 30)|((x & 0x1ff) << 99)|((x & 0x3fe00) << 81)|((x & 0x7fc0000) << 63)|((x & 0x7000000000000000000000000000) >> 30)|((x & 0xe38000000000000000000000000000) >> 42)|((x & 0x1c71c0000000000000000000000000000) >> 54)|((x & 0xe38000000000000000000000000000000) >> 66)|((x & 0x7000000000000000000000000000000000) >> 78)|((x & 0x38000000000000000000000000000000000) >> 84)|((x & 0x1c0000000000000000000000000000000000) >> 90)|((x & 0xe00000000000000000000000000000000000) >> 96)|((x & 0x7000000000000000000000000000000000000) >> 102)|((x & 0x38000000000000000000000000000000000000) >> 108)|((x & 0x1c0000000000000000000000000000000000000) >> 114)|((x & 0xe00000000000000000000000000000000000000) >> 120)|((x & 0x7000000000000000000000000000000000000000) >> 126)|((x & 0x38000000000000000000000000000000000000000) >> 132)|((x & 0x3fe00000000000000000000) >> 63)|((x & 0x7fc0000000000000000000000) >> 81)|((x & 0xff8000000000000000000000000) >> 99);
    }
    if actual_color_pattern == 116 {
        return ((x & 0xe00000000000000000000) << 78)|((x & 0x1c7000000000000000000000) << 66)|((x & 0x38e38000000000000000000000) << 54)|((x & 0x1c7000000000000000000000000) << 42)|((x & 0xe00000000000000000000000000) << 30)|((x & 0x1c0) << 126)|((x & 0x38007) << 114)|((x & 0x7000e00) << 102)|((x & 0x38) << 120)|((x & 0x7000) << 108)|((x & 0xe00000) << 96)|((x & 0x1c0000) << 90)|((x & 0x38000000000000000000000000000000000) >> 30)|((x & 0x71c0000000000000000000000000000000000) >> 42)|((x & 0xe38e00000000000000000000000000000000000) >> 54)|((x & 0x71c0000000000000000000000000000000000000) >> 66)|((x & 0x38000000000000000000000000000000000000000) >> 78)|((x & 0x38000000) << 51)|((x & 0x71c0000000) << 39)|((x & 0xe38e00000000) << 27)|((x & 0x71c0000000000) << 15)|((x & 0x38000000000000) << 3)|((x & 0x1c0000000000000) >> 3)|((x & 0x38e00000000000000) >> 15)|((x & 0x71c7000000000000000) >> 27)|((x & 0x38e00000000000000000) >> 39)|((x & 0x1c0000000000000000000) >> 51)|((x & 0x1c0038000000000000000000000000000) >> 102)|((x & 0xe00000000000000000000000000000) >> 96)|((x & 0x7000000000000000000000000000) >> 90)|((x & 0xe001c0000000000000000000000000000) >> 114)|((x & 0x7000000000000000000000000000000) >> 108)|((x & 0x7000000000000000000000000000000000) >> 126)|((x & 0x38000000000000000000000000000000) >> 120);
    }
    if actual_color_pattern == 270 {
        return ((x & 0x70000000000001c0000000000000) << 51)|((x & 0x38000000000000e000000000001c0) << 45)|((x & 0x1c0000000000007000000000000038) << 39)|((x & 0xe00000000000038000000000038007) << 33)|((x & 0x70000000000001c0000000000007000) << 27)|((x & 0x38000000000000e00000000007000e00) << 21)|((x & 0x1c0000000000007000000000000e00000) << 15)|((x & 0xe000000000000380000000000001c0000) << 9)|((x & 0x70000000000001c0000000000000000000) << 3)|((x & 0x38000000000000e00000000000000000000) >> 3)|((x & 0x1c0000000000007000000000000038000000) >> 9)|((x & 0xe00000000000038000000000007000000000) >> 15)|((x & 0x70000000000001c0000000000e001c0000000) >> 21)|((x & 0x38000000000000e00000000000038000000000) >> 27)|((x & 0x1c0000000000007000000000007000e00000000) >> 33)|((x & 0xe000000000000380000000000001c0000000000) >> 39)|((x & 0x70000000000001c0000000000038000000000000) >> 45)|((x & 0x38000000000000e00000000000000000000000000) >> 51);
    }
    panic!("State was not possible to orient: {}", x);
}

pub fn lu(x: i256) -> i256 {
    return ((x & 0x7000000000000000) << 99)|((x & 0x7e3f1f8fc7e3f1f8fc7e3f1f8fc0038007ffffff) << 0)|((x & 0xe00000000000000000) << 81)|((x & 0x1c0000000000000000000) << 63)|((x & 0x381c0e00038000e07038000000000000000000000) >> 27)|((x & 0x1c0000000000000000000000000000) >> 9)|((x & 0x7000000000000000000000000000000000) >> 45)|((x & 0xe001c0000000) << 6)|((x & 0x7000000000) << 12)|((x & 0x38000000) << 18)|((x & 0x7000e00000000) >> 6)|((x & 0x38000000000000) >> 18)|((x & 0x1c0000000000) >> 12);
}

pub fn ld(x: i256) -> i256 {
    return ((x & 0x70381c00070001c0e07000000000000000) << 27)|((x & 0x7e3f1f8fc7e3f1f8fc7e3f1f8fc0038007ffffff) << 0)|((x & 0x38000000000000000000000) << 45)|((x & 0xe00000000000000000000000000) << 9)|((x & 0xe00000000000000000000000000000000000) >> 63)|((x & 0x1c0000000000000000000000000000000000000) >> 81)|((x & 0x38000000000000000000000000000000000000000) >> 99)|((x & 0xe00000000) << 18)|((x & 0x1c0038000000) << 6)|((x & 0x38007000000000) >> 6)|((x & 0x1c0000000) << 12)|((x & 0x7000000000000) >> 12)|((x & 0xe00000000000) >> 18);
}

pub fn ru(x: i256) -> i256 {
    return ((x & 0x3f1f8fc7e3f1f8fc7e3f1f8fc7e3ffffff8007000) << 0)|((x & 0x1c0000000000000) << 99)|((x & 0x38000000000000000) << 81)|((x & 0x7000000000000000000) << 63)|((x & 0xe07038000e000381c0e00000000000000000000) >> 27)|((x & 0x7000000000000000000000000000) >> 9)|((x & 0x1c0000000000000000000000000000000) >> 45)|((x & 0x1c0) << 18)|((x & 0x38007) << 6)|((x & 0x7000e00) >> 6)|((x & 0x38) << 12)|((x & 0xe00000) >> 12)|((x & 0x1c0000) >> 18);
}

pub fn rd(x: i256) -> i256 {
    return ((x & 0x3f1f8fc7e3f1f8fc7e3f1f8fc7e3ffffff8007000) << 0)|((x & 0x1c0e070001c00070381c0000000000000) << 27)|((x & 0xe00000000000000000000) << 45)|((x & 0x38000000000000000000000000) << 9)|((x & 0x38000000000000000000000000000000000) >> 63)|((x & 0x7000000000000000000000000000000000000) >> 81)|((x & 0xe00000000000000000000000000000000000000) >> 99)|((x & 0x1c0038) << 6)|((x & 0xe00) << 12)|((x & 0x7) << 18)|((x & 0xe001c0) >> 6)|((x & 0x7000000) >> 18)|((x & 0x38000) >> 12);
}

pub fn fl(x: i256) -> i256 {
    return ((x & 0xe001c0000000000000000000000000000000000) << 6)|((x & 0x7000000000000000000000000000000000000) << 12)|((x & 0x38000000000000000000000000000000000) << 18)|((x & 0x7000e00000000000000000000000000000000000) >> 6)|((x & 0x38007fffe00fffffffffff803f1f8fc0fc7e3f) << 0)|((x & 0x38000000000000000000000000000000000000000) >> 18)|((x & 0x1c0000000000000000000000000000000000000) >> 12)|((x & 0x7000000) << 90)|((x & 0x38000) << 96)|((x & 0x1c0) << 102)|((x & 0xe00000000000) << 15)|((x & 0x7000000000) << 21)|((x & 0x38000000) << 27)|((x & 0x7000000000000000000000000000) >> 63)|((x & 0x38000000000000000000000000000) >> 75)|((x & 0x1c0000000000000000000000000000) >> 87)|((x & 0x1c0000000000000) >> 30)|((x & 0xe00000000000000) >> 42)|((x & 0x7000000000000000) >> 54);
}

pub fn fr(x: i256) -> i256 {
    return ((x & 0xe00000000000000000000000000000000000) << 18)|((x & 0x1c0038000000000000000000000000000000000) << 6)|((x & 0x38007000000000000000000000000000000000000) >> 6)|((x & 0x1c0000000000000000000000000000000000) << 12)|((x & 0x38007fffe00fffffffffff803f1f8fc0fc7e3f) << 0)|((x & 0x7000000000000000000000000000000000000000) >> 12)|((x & 0xe00000000000000000000000000000000000000) >> 18)|((x & 0x38000000) << 87)|((x & 0x7000000000) << 75)|((x & 0xe00000000000) << 63)|((x & 0x1c0) << 54)|((x & 0x38000) << 42)|((x & 0x7000000) << 30)|((x & 0x7000000000000000) >> 15)|((x & 0xe00000000000000) >> 21)|((x & 0x1c0000000000000) >> 27)|((x & 0x1c0000000000000000000000000000) >> 90)|((x & 0x38000000000000000000000000000) >> 96)|((x & 0x7000000000000000000000000000) >> 102);
}

pub fn bl(x: i256) -> i256 {
    return ((x & 0x3ffffff803ffff000e00000ffffc7e3f1ffe3f1f8) << 0)|((x & 0x1c0000) << 114)|((x & 0xe00) << 120)|((x & 0x7) << 126)|((x & 0x38007000000000000000000000) << 6)|((x & 0x1c0000000000000000000000) << 12)|((x & 0xe00000000000000000000) << 18)|((x & 0x1c0038000000000000000000000) >> 6)|((x & 0xe00000000000000000000000000) >> 18)|((x & 0x7000000000000000000000000) >> 12)|((x & 0x38000000000000) << 27)|((x & 0x1c0000000000) << 33)|((x & 0xe00000000) << 39)|((x & 0x1c0000000000000000000000000000000) >> 75)|((x & 0xe00000000000000000000000000000000) >> 87)|((x & 0x7000000000000000000000000000000000) >> 99)|((x & 0x7000000000000000000) >> 54)|((x & 0x38000000000000000000) >> 66)|((x & 0x1c0000000000000000000) >> 78);
}

pub fn br(x: i256) -> i256 {
    return ((x & 0x3ffffff803ffff000e00000ffffc7e3f1ffe3f1f8) << 0)|((x & 0xe00000000) << 99)|((x & 0x1c0000000000) << 87)|((x & 0x38000000000000) << 75)|((x & 0x38000000000000000000000) << 18)|((x & 0x7000e00000000000000000000) << 6)|((x & 0xe001c0000000000000000000000) >> 6)|((x & 0x7000000000000000000000) << 12)|((x & 0x1c0000000000000000000000000) >> 12)|((x & 0x38000000000000000000000000) >> 18)|((x & 0x7) << 78)|((x & 0xe00) << 66)|((x & 0x1c0000) << 54)|((x & 0x1c0000000000000000000) >> 27)|((x & 0x38000000000000000000) >> 33)|((x & 0x7000000000000000000) >> 39)|((x & 0x7000000000000000000000000000000000) >> 114)|((x & 0xe00000000000000000000000000000000) >> 120)|((x & 0x1c0000000000000000000000000000000) >> 126);
}

pub fn ul(x: i256) -> i256 {
    return ((x & 0x7fc0000) << 135)|((x & 0x1ffff8007000007ffffffffffc01ffff803ffff) << 0)|((x & 0x1c0000000000000000000000000000) << 18)|((x & 0x38007000000000000000000000000000) << 6)|((x & 0x7000e00000000000000000000000000000) >> 6)|((x & 0x38000000000000000000000000000) << 12)|((x & 0xe00000000000000000000000000000000) >> 12)|((x & 0x1c0000000000000000000000000000000) >> 18)|((x & 0xe00000000000) << 60)|((x & 0x7000000000000) << 54)|((x & 0x38000000000000) << 48)|((x & 0x3fe00000000000000000000000000000000000000) >> 108)|((x & 0x38000000000000000000000000) >> 75)|((x & 0x1c0000000000000000000000000) >> 81)|((x & 0xe00000000000000000000000000) >> 87);
}

pub fn ur(x: i256) -> i256 {
    return ((x & 0x3fe00000000000) << 108)|((x & 0x1ffff8007000007ffffffffffc01ffff803ffff) << 0)|((x & 0x1c0038000000000000000000000000000) << 6)|((x & 0xe00000000000000000000000000000) << 12)|((x & 0x7000000000000000000000000000) << 18)|((x & 0xe001c0000000000000000000000000000) >> 6)|((x & 0x7000000000000000000000000000000000) >> 18)|((x & 0x38000000000000000000000000000000) >> 12)|((x & 0x1c0000) << 87)|((x & 0xe00000) << 81)|((x & 0x7000000) << 75)|((x & 0x38000000000000000000000000) >> 48)|((x & 0x1c0000000000000000000000000) >> 54)|((x & 0xe00000000000000000000000000) >> 60)|((x & 0x3fe00000000000000000000000000000000000000) >> 135);
}

pub fn dl(x: i256) -> i256 {
    return ((x & 0x3ffff007ffffffffffc00001c003ffff007fffe00) << 0)|((x & 0x1ff) << 135)|((x & 0x38000000) << 60)|((x & 0x1c0000000) << 54)|((x & 0xe00000000) << 48)|((x & 0x7000000000000000) << 18)|((x & 0xe001c0000000000000) << 6)|((x & 0x1c0038000000000000000) >> 6)|((x & 0xe00000000000000) << 12)|((x & 0x38000000000000000000) >> 12)|((x & 0x7000000000000000000) >> 18)|((x & 0xff8000000000000000000000000000000000) >> 108)|((x & 0xe00000000000000000000) >> 75)|((x & 0x7000000000000000000000) >> 81)|((x & 0x38000000000000000000000) >> 87);
}

pub fn dr(x: i256) -> i256 {
    return ((x & 0x3ffff007ffffffffffc00001c003ffff007fffe00) << 0)|((x & 0xff8000000) << 108)|((x & 0x7) << 87)|((x & 0x38) << 81)|((x & 0x1c0) << 75)|((x & 0x7000e00000000000000) << 6)|((x & 0x38000000000000000) << 12)|((x & 0x1c0000000000000) << 18)|((x & 0x38007000000000000000) >> 6)|((x & 0x1c0000000000000000000) >> 18)|((x & 0xe00000000000000000) >> 12)|((x & 0xe00000000000000000000) >> 48)|((x & 0x7000000000000000000000) >> 54)|((x & 0x38000000000000000000000) >> 60)|((x & 0xff8000000000000000000000000000000000) >> 135);
}

pub fn mu(x: i256) -> i256 {
    return ((x & 0x38fc7e3f1f8fc7e3f1f8fc7e3f1ffffffffffffff) << 0)|((x & 0xe00000000000000) << 99)|((x & 0x1c0000000000000000) << 81)|((x & 0x38000000000000000000) << 63)|((x & 0x70381c00070001c0e07000000000000000000000) >> 27)|((x & 0x38000000000000000000000000000) >> 9)|((x & 0xe00000000000000000000000000000000) >> 45);
}

pub fn md(x: i256) -> i256 {
    return ((x & 0x38fc7e3f1f8fc7e3f1f8fc7e3f1ffffffffffffff) << 0)|((x & 0xe07038000e000381c0e00000000000000) << 27)|((x & 0x7000000000000000000000) << 45)|((x & 0x1c0000000000000000000000000) << 9)|((x & 0x1c0000000000000000000000000000000000) >> 63)|((x & 0x38000000000000000000000000000000000000) >> 81)|((x & 0x7000000000000000000000000000000000000000) >> 99);
}

pub fn ml_x(x: i256) -> i256 {
    return ((x & 0x3ffffffffc01fffffffffff007ff8fc7e3f1f8fc7) << 0)|((x & 0xe00000) << 102)|((x & 0x7000) << 108)|((x & 0x38) << 114)|((x & 0x7000000000000) << 21)|((x & 0x38000000000) << 27)|((x & 0x1c0000000) << 33)|((x & 0xe00000000000000000000000000000) >> 69)|((x & 0x7000000000000000000000000000000) >> 81)|((x & 0x38000000000000000000000000000000) >> 93)|((x & 0x38000000000000000) >> 42)|((x & 0x1c0000000000000000) >> 54)|((x & 0xe00000000000000000) >> 66);
}

pub fn mr_x(x: i256) -> i256 {
    return ((x & 0x3ffffffffc01fffffffffff007ff8fc7e3f1f8fc7) << 0)|((x & 0x1c0000000) << 93)|((x & 0x38000000000) << 81)|((x & 0x7000000000000) << 69)|((x & 0x38) << 66)|((x & 0x7000) << 54)|((x & 0xe00000) << 42)|((x & 0xe00000000000000000) >> 21)|((x & 0x1c0000000000000000) >> 27)|((x & 0x38000000000000000) >> 33)|((x & 0x38000000000000000000000000000000) >> 102)|((x & 0x7000000000000000000000000000000) >> 108)|((x & 0xe00000000000000000000000000000) >> 114);
}

pub fn ml_y(x: i256) -> i256 {
    return ((x & 0x3fe00fffffffffff803ffffffffffe00ffffc01ff) << 0)|((x & 0x3fe00) << 135)|((x & 0x7000000000) << 60)|((x & 0x38000000000) << 54)|((x & 0x1c0000000000) << 48)|((x & 0x1ff000000000000000000000000000000000000) >> 108)|((x & 0x1c0000000000000000000000) >> 75)|((x & 0xe00000000000000000000000) >> 81)|((x & 0x7000000000000000000000000) >> 87);
}

pub fn mr_y(x: i256) -> i256 {
    return ((x & 0x3fe00fffffffffff803ffffffffffe00ffffc01ff) << 0)|((x & 0x1ff000000000) << 108)|((x & 0xe00) << 87)|((x & 0x7000) << 81)|((x & 0x38000) << 75)|((x & 0x1c0000000000000000000000) >> 48)|((x & 0xe00000000000000000000000) >> 54)|((x & 0x7000000000000000000000000) >> 60)|((x & 0x1ff000000000000000000000000000000000000) >> 135);
}

// self.solved_cube_binary
pub static ALL_OPERATIONS: &'static [fn(i128) -> i128] = &[lu, ld, ru, rd, fl, fr, bl, br, ul, ur, dl, dr, mu, md, ml_x, mr_x, ml_y, mr_y];
pub static FIXED_CUBIE_OPERATIONS: &'static [fn(i128) -> i128] = &[lu, ld, bl, br, ul, ur, mu, md, ml_x, mr_x, ml_y, mr_y];
pub static SOLVED_STATE: i128 = 0x924924a4924926db6db72492492db6db6edb6db6;
    